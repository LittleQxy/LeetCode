/*将一个整数反转*/
class Solution {
    public int reverse(int x) {
        if(x==0||x>=Math.pow(2,31)-1||x<-Math.pow(2,31)){
            return 0;
        }
        int i=10;
        int a=x;
        int count=0;
        while(a!=0){
            count++;
            a=a/10;
        }
        while(x!=0){
            int b=x%10;
            a+=b*Math.pow(10,(count-1));
            x=x/10;
            count--;
        }
        if(a==2147483647||a==-2147483648){
            return 0;
        }
        return a;
    }
}
/*验证二叉搜索树*/
class Solution {
    long pre = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        // 访问左子树
        if (!isValidBST(root.left)) {
            return false;
        }
        // 访问当前节点：如果当前节点小于等于中序遍历的前一个节点，说明不满足BST，返回 false；否则继续遍历。
        if (root.val <= pre) {
            return false;
        }
        pre = root.val;
        // 访问右子树
        return isValidBST(root.right);
    }
}
